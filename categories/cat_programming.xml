<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lk (Posts about programming)</title><link>http://lkioi.me/</link><description></description><atom:link href="http://lkioi.me/categories/cat_programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:lenny.kinyanjui.lk@gmail.com"&gt;Leonard Kioi&lt;/a&gt; </copyright><lastBuildDate>Mon, 23 Mar 2020 10:22:20 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Named Parameters in Dart, Swift and Python</title><link>http://lkioi.me/posts/named-parameters-in-dart-swift-and-python/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;In software development we optimize for readability since code is read more than its written. Named parameters are one way to improve code readability. Lets say we have a function that calculates the distance between two points. I takes two point &lt;code&gt;Point&lt;/code&gt; class instances representing the start and end positions. When calling the functions, using positional arguments its not very clear what is being referred to.&lt;/p&gt;
&lt;p&gt;In Python:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d80e6e2bbf9ab513654aa97e43f37fc6.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;def calculate_distance(start_position: Point, end_position: Point):
    pass

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;In Dart:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/9edb982793fda8440be6d22219f96129.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance(Point startPosition, Point endPosition) {
}

calculateDistance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;In Swift:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/100a5abd8670331750435a8b0ff719de.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;func calculate_distance(_ start_position: Point, _ end_position: Point) {
}

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;On the other hand, using named parameters makes function calls more expressive, its clear to the reader what the arguments represent. This becomes helpful particularly as the number of arguments grow. Lets add one more argument. In the examples below when calling the functions its not very clear what the third argument is when its being read.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/fa6f6cd79647c97c2997160a0998d028.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;def calculate_distance(start_position: Point, end_position: Point, srid: int):
    pass

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18d19b34c43454518b3195f704d0576f.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance(Point startPosition, Point endPosition, int srid) {
}

calculateDistance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/694317b02b1abb74cd322fadb8f795a0.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
func calculate_distance(_ start_position: Point, _ end_position: Point, _ srid: Int) {
}

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Using named parameters is really helpful in such a situation. In the three languages its possible to specify that the parameters should be passed as named parameters. In Python, we can add a &lt;code&gt;*,&lt;/code&gt; before the parameters, in dart we can add curly braces around the parameters and in swift we can remove the underscore before the parameter names.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/1ca8b8c2615e45b779d074c4a57bd7c7.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
def calculate_distance(*, start_position: Point, end_position: Point, srid: int):
    pass

calculate_distance(start_position=Point(-12.3, 45.4), end_position=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/dfe21e1755ca663ec82b2ea8bf017778.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance({Point startPosition, Point endPosition, int srid}) {
}

calculateDistance(startPosition=Point(-12.3, 45.4), endPosition=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/19c64a6b97bc7c6be70cf8d9f6e508d6.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
func calculate_distance(start_position: Point, end_position: Point, srid: Int) {
}

calculate_distance(start_position=Point(-12.3, 45.4), end_position=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dart</category><category>python</category><category>swift</category><guid>http://lkioi.me/posts/named-parameters-in-dart-swift-and-python/</guid><pubDate>Mon, 23 Mar 2020 09:20:58 GMT</pubDate></item></channel></rss>