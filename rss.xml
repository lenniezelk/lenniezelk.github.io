<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>lk</title><link>http://lkioi.me/</link><description>Rants and musings of Leonard Kioi a sofware developer and cycling enthusiast from Nairobi, Kenya</description><atom:link href="http://lkioi.me/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:lenny.kinyanjui.lk@gmail.com"&gt;Leonard Kioi&lt;/a&gt; </copyright><lastBuildDate>Sat, 06 Feb 2021 15:17:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Named Parameters in Dart, Swift and Python</title><link>http://lkioi.me/posts/named-parameters-in-dart-swift-and-python/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;In software development we optimize for readability since code is read more than its written. Named parameters are one way to improve code readability. Lets say we have a function that calculates the distance between two points. I takes two point &lt;code&gt;Point&lt;/code&gt; class instances representing the start and end positions. When calling the functions, using positional arguments its not very clear what is being referred to.&lt;/p&gt;
&lt;p&gt;In Python:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/d80e6e2bbf9ab513654aa97e43f37fc6.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;def calculate_distance(start_position: Point, end_position: Point):
    pass

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;In Dart:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/9edb982793fda8440be6d22219f96129.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance(Point startPosition, Point endPosition) {
}

calculateDistance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;In Swift:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/100a5abd8670331750435a8b0ff719de.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;func calculate_distance(_ start_position: Point, _ end_position: Point) {
}

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9))&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;On the other hand, using named parameters makes function calls more expressive, its clear to the reader what the arguments represent. This becomes helpful particularly as the number of arguments grow. Lets add one more argument. In the examples below when calling the functions its not very clear what the third argument is when its being read.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/fa6f6cd79647c97c2997160a0998d028.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;def calculate_distance(start_position: Point, end_position: Point, srid: int):
    pass

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/18d19b34c43454518b3195f704d0576f.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance(Point startPosition, Point endPosition, int srid) {
}

calculateDistance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/694317b02b1abb74cd322fadb8f795a0.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
func calculate_distance(_ start_position: Point, _ end_position: Point, _ srid: Int) {
}

calculate_distance(Point(-12.3, 45.4), Point(56.2, 27.9), 4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;Using named parameters is really helpful in such a situation. In the three languages its possible to specify that the parameters should be passed as named parameters. In Python, we can add a &lt;code&gt;*,&lt;/code&gt; before the parameters, in dart we can add curly braces around the parameters and in swift we can remove the underscore before the parameter names.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/1ca8b8c2615e45b779d074c4a57bd7c7.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
def calculate_distance(*, start_position: Point, end_position: Point, srid: int):
    pass

calculate_distance(start_position=Point(-12.3, 45.4), end_position=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/dfe21e1755ca663ec82b2ea8bf017778.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;calculateDistance({Point startPosition, Point endPosition, int srid}) {
}

calculateDistance(startPosition=Point(-12.3, 45.4), endPosition=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/19c64a6b97bc7c6be70cf8d9f6e508d6.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;
func calculate_distance(start_position: Point, end_position: Point, srid: Int) {
}

calculate_distance(start_position=Point(-12.3, 45.4), end_position=Point(56.2, 27.9), srid=4312)&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dart</category><category>python</category><category>swift</category><guid>http://lkioi.me/posts/named-parameters-in-dart-swift-and-python/</guid><pubDate>Mon, 23 Mar 2020 09:20:58 GMT</pubDate></item><item><title>Running flutter app on Genymotion</title><link>http://lkioi.me/posts/running-flutter-app-on-genymotion/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;To run flutter apps for android development you have the option of running the app on android studio AVDs or genymotion. I prefer genymotion since I find more lightweight and I can run vagrant boxes usually for the backend of the application. This is not possible with AVDs. Flutter fails to recognize the devices created using genymotion. After searching around the internet I could not find a solution so I'm going to post what worked for me.&lt;/p&gt;
&lt;p&gt;Ensure you have installed the Android SDKs for the target platforms. You can do this from the SDK manager in Android Studio. Launch Genymotion. On the menu bar go to: &lt;code&gt;Genymotion &amp;gt; Settings&lt;/code&gt;. This will launch a dialog box. Select &lt;code&gt;ADB&lt;/code&gt; in the dialog. Enter the path to your Android SDK folder. For example on my local setup this is &lt;code&gt;/home/lk/Android/Sdk&lt;/code&gt;. Restart Genymotion and launch your devices. I had some problems with devices I had created before I made these changes. In this case I deleted and recreated them. When you run &lt;code&gt;flutter devices&lt;/code&gt; your launched device should appear now. Run &lt;code&gt;flutter run&lt;/code&gt; to launch the app. Happy fluttering.&lt;/p&gt;&lt;/div&gt;</description><category>flutter</category><category>programming</category><guid>http://lkioi.me/posts/running-flutter-app-on-genymotion/</guid><pubDate>Mon, 15 Jul 2019 08:41:24 GMT</pubDate></item><item><title>Flutter loading screen with future builder</title><link>http://lkioi.me/posts/flutter-loading-screen-with-future-builder/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;When developing UIs you need to give the user some feedback on a long running process. A loading widget is normally the go to solution. In React you would have a boolean property in the components state. If for example you are fetching some data from the internet, you would set the boolean to &lt;code&gt;true&lt;/code&gt;. In the component's &lt;code&gt;render&lt;/code&gt; method you would display a loading widget based on the value of that boolean property. When you have your data you show the right component. Something like:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/e4e394e64d585714ff0d555103948dd7.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;import React from 'react'
import axios from 'axios'

import Loading from './Loading.jsx'
import Posts from './Posts.jsx'

class Page extends React.Component {
  constructor(props) {
    super(props)
    
    this.state = {
      loading: false,
      posts: [],
    }
  }
  
  componentDidMount() {
    this.fetchData()
  }
  
  async fetchData() {
    this.setState({loading: true})
    
    const response = await axios.get('https://jsonplaceholder.typicode.com/posts');
    this.setState({loading: false, posts: response})
  }
  
  render() {
    const {loading, posts} = this.state
    
    {loading ? &amp;lt;Loading /&amp;gt; : &amp;lt;Posts posts={posts} /&amp;gt;}
  }
}
&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;

&lt;p&gt;This can be achieved easily in Flutter with &lt;a href="https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html"&gt;Future Builder&lt;/a&gt;. FutureBuilder allows you to specify a future and a builder function. The builder function will be passed snapshots based on the state of the future. You can then check the snapshot and display your loading widget. The same can be achieved by using viewmodels and state management tools like &lt;a href="https://pub.dev/packages/provider"&gt;Provide&lt;/a&gt;. This is so much easier though. Example:&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;div class="gist"&gt;
&lt;script src="https://gist.github.com/7275c14bcd1b61d3e190b80b4895c524.js"&gt;&lt;/script&gt;
&lt;noscript&gt;
&lt;pre&gt;import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class MyHomePage extends StatelessWidget {
  Future&amp;lt;String&amp;gt; getPosts() async {
    var resp = await http.get('https://jsonplaceholder.typicode.com/posts');
    return resp.body;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder&amp;lt;String&amp;gt;(
        future: getPosts(),
        builder: (context, snapshot) {
          if (snapshot.hasError) {
            return Text(
              'There was an error :(',
              style: Theme.of(context).textTheme.headline,
            );
          } else if (snapshot.hasData) {
            var count = json.decode(snapshot.data).length;
            return Text(
              'You have $count posts.',
              style: Theme.of(context).textTheme.headline,
            );
          } else {
            return CircularProgressIndicator();
          }
        });
  }
}&lt;/pre&gt;
&lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>dart</category><category>flutter</category><category>programming</category><guid>http://lkioi.me/posts/flutter-loading-screen-with-future-builder/</guid><pubDate>Thu, 11 Jul 2019 07:43:59 GMT</pubDate></item><item><title>Setting up Dart for local development</title><link>http://lkioi.me/posts/setting-up-dart-for-local-development/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been learning Flutter for mobile development lately. I like the journey so far and I'm going to be posting stuff I learn along the way. First i'll show how to setup Dart for local development. I use &lt;code&gt;asdf&lt;/code&gt; for managing different versions of language runtimes on my local machine. I found out about it when trying to setup different Python versions. My dev machine comes with Python 3.7 but at work we use Python 3.6 and I like having the exact version in use. What to do? &lt;code&gt;asdf&lt;/code&gt; to the rescue. &lt;code&gt;asdf&lt;/code&gt; has a plugin system that allows allows the installation of different langauge runtimes for example you can install Python 3.5, 3.6 and 3.8 on the same machine and switch between them. A lot of langauges are supported you can find these &lt;a href="https://asdf-vm.com/#/plugins-all"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To setup &lt;code&gt;asdf&lt;/code&gt; run:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.2&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Replace &lt;code&gt;0.7.2&lt;/code&gt; with the latest version which you can find &lt;a href="https://github.com/asdf-vm/asdf/releases"&gt;here&lt;/a&gt;. Next add &lt;code&gt;asdf&lt;/code&gt; to your shell like so:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;'\n. $HOME/.asdf/asdf.sh'&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s1"&gt;'\n. $HOME/.asdf/completions/asdf.bash'&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Remember to replace &lt;code&gt;.zshrc&lt;/code&gt; with your shell specific config file e.g .bashrc. Reload your config file &lt;code&gt;source .zshrc&lt;/code&gt;. You are good to go.&lt;/p&gt;
&lt;p&gt;Now lets setup dart. We begin by installing the dart plugin:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asdf plugin-add dart
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we can install dart sdk and tools by running:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asdf install dart &lt;span class="m"&gt;2&lt;/span&gt;.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Replace 3.2.1 with the latest version or the version you want. You can find these &lt;a href="https://github.com/dart-lang/sdk/releases"&gt;here&lt;/a&gt;. You need to choose a global version. This is the version that will be run when you type &lt;code&gt;dart&lt;/code&gt; in any shell. You can do this by:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asdf global dart &lt;span class="m"&gt;2&lt;/span&gt;.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can also set a version to be used only in the current shell:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;asdf &lt;span class="nb"&gt;local&lt;/span&gt; dart &lt;span class="m"&gt;2&lt;/span&gt;.3.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Happy darting.&lt;/p&gt;&lt;/div&gt;</description><category>dart</category><category>flutter</category><category>programming</category><guid>http://lkioi.me/posts/setting-up-dart-for-local-development/</guid><pubDate>Tue, 28 May 2019 08:23:34 GMT</pubDate></item><item><title>Get your PRs merged faster</title><link>http://lkioi.me/posts/get-your-prs-merged-faster/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;Every developer wants their code in production as soon as possible. I am assuming you are in a team or at least have someone else to review your code before its merged into staging or production environments. In the past two years I have seen an improvement in the time it takes to get my code merged.&lt;/p&gt;
&lt;p&gt;I've had my PRs waiting for review for days on end. Its annoying to say the least. I'll share a few points that helped me get my PRs reviewed and merged a lot faster.&lt;/p&gt;
&lt;h3&gt;Its a team thing.&lt;/h3&gt;
&lt;p&gt;As developers we tend to be fiercely independent. This unfortunately does not help deliver products to clients any faster. As a team you need to learn to set aside your individual goals and work on team goals. I used to say things like "I managed to complete all the tasks I set out to do this week" during retro. Now I try to see did we complete all tasks assigned to our team. Changing this mindset is hard and slow but its worth the results.
Agree as a team to be setting aside time to review each other's PRs. Maybe at the start of the day and end of the day. This will leave you with enough time to focus on your tasks.&lt;/p&gt;
&lt;h3&gt;Have a good relationship with your team mates.&lt;/h3&gt;
&lt;p&gt;Try and have a good relationship with your team mates. Be interested in them as people. This helps resolve any conflicts when they do arise and we all work better with people we like. Remember at some point you will need help from your team mates and having a good relationship with them allows you to ask for help without things getting weird.&lt;/p&gt;
&lt;h3&gt;Write clean code.&lt;/h3&gt;
&lt;p&gt;Write good code. No one likes to read spaghetti code and super huge functions in which you have to spend a lot of time piecing together. If you regularly write bad code, your team mates will avoid your PRs and only check them when its completely unavoidable. This is a skill that can be learnt. There are good books and articles out there for this. A quick google search will guide you.&lt;/p&gt;&lt;/div&gt;</description><guid>http://lkioi.me/posts/get-your-prs-merged-faster/</guid><pubDate>Mon, 11 Mar 2019 08:21:07 GMT</pubDate></item><item><title>Improving readability of Python code</title><link>http://lkioi.me/posts/type-hints-in-python/</link><dc:creator>Leonard Kioi</dc:creator><description>&lt;div&gt;&lt;p&gt;Readability of code as defined in wikipedia:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;In computer programming, readability refers to the ease with which a human reader can comprehend the purpose,&lt;/span&gt;
&lt;span class="err"&gt;control flow, and operation of source code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Python is one of the most readable programming languages out there but we can still improve this more by following software
development best practises and tools provided by Python core language and the Python community. By software development best practises
I am referring to writing clean code. Watch things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use good descriptive variable and function names&lt;/li&gt;
&lt;li&gt;Follow SOLID priciples&lt;/li&gt;
&lt;li&gt;Keep functions short&lt;/li&gt;
&lt;li&gt;Follow coding conventions for your programming language e.g PEP8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Python, type hinting is also a good option since version 3.5. This will be my main focus for this article.&lt;/p&gt;
&lt;p&gt;In this article I am only going to refer to tools specific to Python, later I will add another article on SOLID with examples in Python.
Python uses duck typing to determine the type of a variable. This usually leads to criticism where people say it reduces
readability and I agree with them. I have been using Python for the past five years and its annoying having to read a
function body in order know the type of parameters passed in. If its a dictionary passed in or tuple its worse because you
have to look through the code to know the type of keys and values of the &lt;code&gt;dict&lt;/code&gt;. I've had to add print statements to determine
the type being passed in.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the code above &lt;code&gt;project&lt;/code&gt; and  &lt;code&gt;date&lt;/code&gt; could be anything. Proper naming of the variables helps but still, &lt;code&gt;project&lt;/code&gt; could
be an &lt;code&gt;int&lt;/code&gt;, the project database id or a user defined class instance. &lt;code&gt;date&lt;/code&gt; could be an &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;datetime.date&lt;/code&gt; object.
This is the problem typing module was added to solve. I don't think types within the function body are a huge deal since
you can usually determine this from the context, even in Kotlin you don't have to specify the type when declaring a variable
it can usually be infered from the context.&lt;/p&gt;
&lt;p&gt;With Python's type hints you can specify the parameter being passed to a function.&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.projects&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Project&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I'm a huge fan of namedtuples, they have a smaller memory footprint compared to classes and are more descriptive that tuples. Typing
takes their descriptiveness to a new level. You can specify the type for the field names.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NamedTuple&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Truck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NamedTuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;num_wheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;num_axles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>programmming</category><category>python</category><guid>http://lkioi.me/posts/type-hints-in-python/</guid><pubDate>Sat, 24 Nov 2018 11:11:52 GMT</pubDate></item></channel></rss>